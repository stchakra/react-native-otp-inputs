{"version":3,"sources":["OtpInput.tsx"],"names":["majorVersionIOS","parseInt","Platform","Version","isOTPSupported","OS","OtpInput","ref","focusStyles","handleKeyPress","handleTextChange","inputContainerStyles","inputStyles","inputValue","placeholder","selectTextOnFocus","rest","focused","setFocused","current","setNativeProps","value","text","select","ios","android","React","memo"],"mappings":"ohBAAA,qDACA,yC,iFAyBA,GAAMA,CAAAA,eAAuB,CAAGC,QAAQ,WAAIC,sBAASC,OAAb,EAAwB,EAAxB,CAAxC,CACA,GAAMC,CAAAA,cAAuB,CAAGF,sBAASG,EAAT,GAAgB,KAAhB,EAAyBL,eAAe,EAAI,EAA5E,CAEA,GAAMM,CAAAA,QAAQ,CAAG,sBACf,cAYEC,GAZF,CAaK,IAXDC,CAAAA,WAWC,MAXDA,WAWC,CAVDC,cAUC,MAVDA,cAUC,CATDC,gBASC,MATDA,gBASC,CARDC,oBAQC,MARDA,oBAQC,CAPDC,WAOC,MAPDA,WAOC,CANDC,UAMC,MANDA,UAMC,CALDC,WAKC,MALDA,WAKC,CAJDC,iBAIC,MAJDA,iBAIC,CAHEC,IAGF,mMAC2B,oBAAS,KAAT,CAD3B,qDACIC,OADJ,eACaC,UADb,eAGH,qBAAU,UAAM,yBACd,OAACX,GAAD,qDAA+BY,OAA/B,sDAAwCC,cAAxC,CAAuD,CACrDC,KAAK,CAAER,UAD8C,CAErDS,IAAI,CAAET,UAF+C,CAAvD,EAID,CALD,CAKG,CAACN,GAAD,CAAMM,UAAN,CALH,EAOA,MACE,8BAAC,iBAAD,EAAM,KAAK,CAAE,CAACF,oBAAD,CAAuBM,OAAO,EAAIT,WAAlC,CAAb,iDACE,6BAAC,sBAAD,wBACE,MAAM,CAAE,wBAAMU,CAAAA,UAAU,CAAC,KAAD,CAAhB,EADV,CAEE,YAAY,CAAER,gBAFhB,CAGE,OAAO,CAAE,yBAAMQ,CAAAA,UAAU,CAAC,IAAD,CAAhB,EAHX,CAIE,UAAU,CAAET,cAJd,CAKE,WAAW,CAAEK,WALf,CAME,GAAG,CAAEP,GANP,CAQE,iBAAiB,CAAEL,sBAASqB,MAAT,CAAgB,CACjCC,GAAG,CAAET,iBAD4B,CAEjCU,OAAO,CAAE,IAFwB,CAAhB,CARrB,CAYE,KAAK,CAAEb,WAZT,CAaE,eAAe,CAAER,cAAc,CAAG,aAAH,CAAmB,MAbpD,CAcE,qBAAqB,CAAC,aAdxB,EAeMY,IAfN,mDADF,CADF,CAqBD,CA7Cc,CAAjB,C,aAgDeU,eAAMC,IAAN,CAAkBrB,QAAlB,C","sourcesContent":["import React, { useState, useEffect, forwardRef, RefObject } from 'react';\nimport {\n  Platform,\n  StyleProp,\n  TextInput,\n  TextStyle,\n  View,\n  ViewStyle,\n  TextInputProps,\n  NativeSyntheticEvent,\n  TextInputKeyPressEventData,\n} from 'react-native';\n\ntype Props = TextInputProps & {\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  firstInput: boolean;\n  focusStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  numberOfInputs: number;\n  handleTextChange: (text: string) => void;\n  inputValue: string;\n  handleKeyPress: (\n    keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>,\n  ) => void;\n};\n\nconst majorVersionIOS: number = parseInt(`${Platform.Version}`, 10);\nconst isOTPSupported: boolean = Platform.OS === 'ios' && majorVersionIOS >= 12;\n\nconst OtpInput = forwardRef<TextInput, Props>(\n  (\n    {\n      focusStyles,\n      handleKeyPress,\n      handleTextChange,\n      inputContainerStyles,\n      inputStyles,\n      inputValue,\n      placeholder,\n      selectTextOnFocus,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [focused, setFocused] = useState(false);\n\n    useEffect(() => {\n      (ref as RefObject<TextInput>)?.current?.setNativeProps({\n        value: inputValue,\n        text: inputValue,\n      });\n    }, [ref, inputValue]);\n\n    return (\n      <View style={[inputContainerStyles, focused && focusStyles]}>\n        <TextInput\n          onBlur={() => setFocused(false)}\n          onChangeText={handleTextChange}\n          onFocus={() => setFocused(true)}\n          onKeyPress={handleKeyPress}\n          placeholder={placeholder}\n          ref={ref}\n          // https://github.com/facebook/react-native/issues/18339\n          selectTextOnFocus={Platform.select({\n            ios: selectTextOnFocus,\n            android: true,\n          })}\n          style={inputStyles}\n          textContentType={isOTPSupported ? 'oneTimeCode' : 'none'}\n          underlineColorAndroid=\"transparent\"\n          {...rest}\n        />\n      </View>\n    );\n  },\n);\n\nexport default React.memo<Props>(OtpInput);\n"]}